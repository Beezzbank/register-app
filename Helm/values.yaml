replicaCount: 1

deployment:
  name: gradecal-api
  labels: beezz-app
  image: 
    app: beezzbank/register-app:1.1

selector:
  app: beezz-app


#
# ConfigMap
# ConfigMap holds configuration data for pods to consume.
# Example:
# configMaps:
#   create: true
#   data:
#     FOO: "BAR"
#
configMaps:
  create: true
  data:

#
# Secret
# Secret holds secret data of a certain type.
# The production environment will be managed by the SRE team.
# Example:
# secrets:
#   create: true
#   data:
#     FOO: "BAR"
#
secrets:
  name: mongodb-secret
  data:
    username: dXNlcm5hbWU=
    password: cGFzc3dvcmQ=


#
# Resources
# Compute Resources required by this container.
#
resources:
  requests:
    cpu: 250m
    memory: 256Mi
  limits:
    cpu: 300m
    memory: 512Mi

#
# Container Ports
# A list of ports to expose from the container.
# Example:
# containerPorts:
#   - 80
#
containerPorts:
  - 3000

#
# Service
# Service is a named abstraction of software service (for example, mysql)
# consisting of local port (for example 3306) that the proxy listens on.
# Example:
# services:
#   name: beezz-service
#   type: ClusterIP
#   ports: 80
#   targetPort: 80
#
service:
  name: beezz-service
  ports: 3000
  targetPort: 3000

#
# Ingress
# Ingress is a collection of rules that allow inbound connections to reach
# the endpoints defined by a backend.
# Example:
# ingress:
#   enabled: true
#   ingressClassName: sit-kaidee-com-ingress-class-private
#   rules:
#     - host: sample-{{ namespace_app }}.sit.kaidee.com
#       http:
#         paths:
#           - path: /
#             backend:
#               servicePort: 80
#
ingress:
  enabled: true
  ingressClassname: nginx
  name: beezz-ing
  rules:
    - host: gradecal.beezzlab.com
      http:
        paths:
        - pathType: Prefix
          backend:
            servicename : beezz-service
          path: /
          

#
# Health Check
# The mechanism to self-healing your pod.
# Visit https://cloud.google.com/blog/products/gcp/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes
# for more details.
# Example:
# In case you need to make a health check with the application command.
# healthCheck:
#   enabled: true
#   readinessProbe:
#     exec:
#       command: $COMMAND
#   livenessProbe:
#     exec:
#       command: $COMMAND
#
healthCheck:
  enabled: false
  readinessProbe:
    httpGet:
      path: /healthz
      port: 5000
    initialDelaySeconds: 30
    timeoutSeconds: 1
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3
  livenessProbe:
    httpGet:
      path: /healthz
      port: 5000
    initialDelaySeconds: 180
    timeoutSeconds: 1
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 3

autoscaling:
  name: hpa-beezz
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80